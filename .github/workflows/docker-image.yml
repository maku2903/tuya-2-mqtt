name: Build and Push Docker Image to DockerHub

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repo
      uses: actions/checkout@v4

    - name: Get release number
      id: get_release
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Determine Docker Image Tags
      id: set_tags
      run: |
        if [[ "${RELEASE_VERSION}" == *RC* ]]; then
          echo "TAGS=makuuu2903/tuya-2-mqtt:${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "LATEST_TAG=" >> $GITHUB_ENV
        else
          echo "TAGS=makuuu2903/tuya-2-mqtt:${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "LATEST_TAG=makuuu2903/tuya-2-mqtt:latest" >> $GITHUB_ENV

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU dependency
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm/v7,linux/arm64,linux/amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Build and push to DockerHub
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/arm/v7,linux/arm64,linux/amd64
        tags: |
          ${{ env.TAGS }}
          ${{ env.LATEST_TAG }}

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Update DockerHub Description
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        set -e
        
        # Check if README.md exists
        if [ ! -f README.md ]; then
          echo "README.md not found!"
          exit 1
        fi
        
        # Get README content
        README_CONTENT=$(<README.md)
        
        # Prepare JSON payload
        PAYLOAD=$(jq -n --arg full_description "$README_CONTENT" '{ full_description: $full_description }')
        
        # Update DockerHub description via API
        RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X PATCH \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $DOCKERHUB_TOKEN" \
          -d "$PAYLOAD" \
          "https://hub.docker.com/v2/repositories/makuuu2903/tuya-2-mqtt/")
        
        if [ "$RESPONSE" -ne 200 ]; then
          echo "Failed to update DockerHub description"
          cat response.json
          exit 1
        else
          echo "DockerHub description updated successfully!"
        fi